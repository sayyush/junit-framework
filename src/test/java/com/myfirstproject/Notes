1. WebDriver
WebDriver is an important API in selenium
We use WebDriver to create driver object(chrome driver, safari, edge, firefox, headless,..)
2. Job title
-QA Engineer, Quality Assurance, SDET, …..
-If there is Selenium keyword in job description, you can apply
3. Framework
It is a combination of packages, classes, methods to keep our codes organized.
4. Manual vs Automation
Automation is simply done for keeping the test step stable and execution test cases faster
5. Advantages & Disadvantages
Selenium is number 1 WEB APPLICATION TESTING TOOL, open source, has large user base, works with multiple browsers, and languages
Cannot automate mobile and desktop applications with out 3rd party tools such as Appium and Auto IT, cannot handle captcha, no professional customer support
6. Functional & Non Functional Testing
Functionality is the answer of what should be done(button click, search, check out,…), non - functional is the answer of how should be done(performance, security,…)
7. Testing Types
Static: done without code such as document review
Dynamic(non-static): done with some type of coding(functional and non functional)
8. Selenium Architecture
W3C protocol
There is request and response between client side (selenium binding) and server side(drivers)
9. Selenium framework installation
We need to be organized to create a framework
We use dependencies in MAVEN project to add selenium, WebDriver, junit, testNG, cucumber,….
Collapse


* driver is api, and browser is an application


* we add selenium dependency on IntelliJ
IntelliJ is an IDE(integrated development environment).
It is development environment.
For ex: Intellij is a car. Selenium ia the engine of the car.
IDE is a software application that helps programmers develop software code efficiently.
Selenium is a library.


* Maven is not a library, it is a project build tool, especially Java.

Where do you get your dependencies in your company?
from MAVEN repository  <<= it is wrong answer
from my company <<= it is true answer

Locators - yer bulucu, konum belirleyici
teardown - destroy breaking smth, seperate each other.
quit - iptal etmek / cikis/ cik

* Anything on the webpage is called "WEBELEMENT", ex: button, search box, text box, headers, tables.


   /*
     ****** What is the difference between get() and navigate() to functions?
     * Similarities: both let you go to a page
     * get is more common than navigate to. it is easy to read
     * get accepts ONLY String as url, navigate to accepts both String and URL
     * navigate has more options such as to(), back(), forward(), refresh()
     *
     * ****** What is the difference between close() and quit()?
     * close() cleses ONLY last active window
     * quit() closes ALL ACTIVE windows
     * recommendation is use quit at the end of the last test case

      */


implicit(tam) wait. wait UP to 30 second  recommended
        // implicit wait it is dynamic wait, this is recommended to use right after CREATING THE DRIVER. It means wait, whenever I use driver
        // in tHis class WAIT up to 20 seconds, if needed. If driver does not need to wait driver is gonna continue to execution as a normal
        // fast pace. implicitlyWait will wait make the driver wait for 10 seconds. By default driver waits about 0.4 second less than a second.
        // less than 1 second by default.
        // If it does not open in 20seconds, it will fail.
        // wait and synchronization are very important for UI testing.
        // Timeouts is the interface for managing driver timeouts(zamanasimi).
        // If your testing is slow, then your test case can fail
        // implicitlyWait() Gets the amount of time,the driver should wait when searching for an element if it is not immediately present.

2 tane wait var Thread. sleep (explicit wait)
                Implicit wait if you dont need

          /*
                   There are 6 JUnit annotations
                1. @Test ==> Used to create test case
                   Test methods must have @Test annotation. They must be public and void because they are created to do assertions.
                2. @Before and @After ==> Used to run before and after EACH @Test method
                3. @BeforeClass and @AfterClass ==> Used to run before and after EACH Class only ONCE. These methods must be static
                4. @Ignore ==> Used to SKIP a test case  (ex: mesela test case 4 u ==> you are working on a project and
                   you haven't finished this yet or there is something wrong here then you will ignore that part in group run and  you can run others)


                                @Before and @After
          @Before is used for repeated pre conditions, @After used for repeated after conditions
          @Before is used to setup the driver, or open the browser, put waits, or go to URL
          @After is used to close browser, or generate reports.
          We separate Test Cases and Pre/After conditions using @Before and @After method
          @Before runs before each @Test method, @After runs after each @Test method



                */


                    Handling DYNAMIC elements
   DYNAMIC element is the element whose value can change.
                    How do you handle how do you locate Dynamic element?
I write dynamic xpath such as "contains", "starts with", "ends with" functions.
//tag[contains(@attribute,'value')]
//tag[starts-with(@attribute,'value')]
//tag[ends-with(@attribute,'value')]
//*[starts-with[@attribute,'value')]
//*[contains(@attribute,'value')]

For example :
Welcome to the page  (it is title)
<h2 id="pageContent" class="nav-flex" name="sub-header">Welcome to the page</h2>


//tag[text()='text value']            ==>   //h2[text='Welcome to the page']
//tag[contains(text(),'text value')]   ==> //h2[contains(text(),'Welcome to')]

//tag[XPath Statement-1 or XPath Statement-2]    ==>      //h2[@id='page-ent' or @class='nav-flex']
                                                         //h2[@id='page-ent'] OR h2[@class='nav-flex']

//tag[XPath Statement-1 and XPath Statement-2]    ==>    //h2[@id='page-ent' and @class='nav-flex']

This is the most commonly used syntax :
// tagname[@attribute='Value']


Note :
 tag can be replaced with * if you want to ignore tag (* refers to ANY tag     . refers to any attribute)


                                     Cookies - cerezler
Browserda gecici olusan bilgi dosyalaridir.
Cookies bilgisayarimizda gecici olarak depolanir.
Cookies, kisisel bilgiler de dahil olmak uzere bircok bilgiyi icerebilir.
Web siteleri, ancak sizin izin verdiginiz bilgilere erisebilir.
Bu web sayfalari, sizin vermediginiz bilgilere erisemez ya da bilgisayarinizdaki diger dosyalari goruntuleyemez.

What is cookie?
The the temporary data that is created by the browser
Cookies are stored in our computers as we visit the websites

We can automate handling cookies:
Find the cookies
Add new cookie
Delete cookies

driver.manage().
                addCookie()
                getCookies() - tum cookieleri getirir
                deleteAllCookies()
                deleteCookie() - tek cookie sileriz.
                getCookieNamed()
                deleteCookieNamed()




/*

flower dosyasinin path(yolunu) almak icin 1.   shift + resmin ustune sag click ordan "copy as path"
                                          2.  bilgisayarda terminal aciyoruz resmi surukle yapistir oylede path veriyor
 */






/*
   To make the path dynamic we need to create home directory:
        String userHome = System.getProperty("user.home");
        System.out.println(userHome);   // C:\Users\ROG

   To make the path current project folder
        String userHome1 = System.getProperty("user.dir");
        System.out.println(userHome1);  // C:\Users\ROG\IdeaProjects\myseleniumproject

*/









/*


package com.utilities;

import io.github.bonigarcia.wdm.WebDriverManager;
import org.apache.commons.io.FileUtils;
import org.junit.After;
import org.junit.Before;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Date;

/*
TestBase'i  abstract yapmamizin sebebi bu sinifin objesini olusturmak istemiyorum
TestBase testBase = new TestBase();  -> YAPILAMAZ
Amacim bu sinifi extend etmek ve icindeki hazir metodlari kullanmak

driver objesini olustur. Driver ya public yada protected olmali.
Sebebi child class'larda gorulebilir olmasi.
 */

public abstract class TestBase {

    protected static  WebDriver driver;

    @Before
    public void setUp() {
        WebDriverManager.chromedriver().setup();
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
    }

    @After
    public void tearDown() throws InterruptedException {
        Thread.sleep(3000);
        driver.quit();
    }

  public void takeScreenshotOfTheEntirePage() throws IOException {

     //  1. TakeScreenShot class with getScreenShotAs method to capture the screenshot

     File image = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);   // selenium section


     // System.getProperty("user.dir") ==> current project folder which means yukardaki "myseleniumproject " level.
     // We want to save our screenshots not in the desktop, not in the downloads, nowhere else. We want to save our image on this current project.

      // 2. Create a Path to save the image
      // Create a data for giving dynamic name otherwise the screenshots overrides

     String now = new SimpleDateFormat("yyyyMMddhhmmss").format(new Date()); // getting local date in this format
                   // CURRENT PROJECT FOLDER        foldername    subfoldername  imagename
     String path = System.getProperty("user.dir")+ "/test-output/Screenshots/" +now+ " image.png" ;

   //  /test-output/Screenshots/"  ==> bunu boyle yazarsak kendisi otamatik aciyor sol tarafta

     // 3. Save the image in the path using JAVA as a file
      FileUtils.copyFile(image,new File(path));

  }


}

// selenium tr  12. actions hakkinda reusable methodlar var orda. 50:21 dk



 // There are some screenshots you CAN, some screenshots you HAVE TO



// test execution - testleri calistirma

/*
                      SCREENSHOTS
Neden ekran goruntusu alinir?
- Dokumantasyon icin
- Gecen test caselerin gectigini kayda gecirmek icin
- Kalan test caselerin de kaldigini/ bug bulundugunu kayda gecirmek icin





*/








